import axios from "axios";
import path from "path";
import {
  app,
  BrowserWindow,
  ipcMain,
  Menu,
  screen,
  session,
  Tray,
} from "electron";
import { config } from "dotenv";

const assetsPath = app.isPackaged
  ? path.join(process.resourcesPath, "assets")
  : path.join(process.cwd(), "assets");

config({ path: path.join(assetsPath, ".env") });

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

ipcMain.handle("safe-fetch", async (e, url) => {
  // console.log(`Fetching ${url}`);
  const response = await axios.get(url);
  return response.data;
});

ipcMain.handle("copy-image-to-clipboard", async () => {
  try {
    const win = BrowserWindow.getFocusedWindow();

    if (!win) {
      console.error("Failed to copy image to clipboard: no focused window");
      return false;
    }

    win.webContents.sendInputEvent({
      type: "keyDown",
      keyCode: "C",
      modifiers: ["control"],
    });
    return true;
  } catch (error) {
    return false;
  }
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize;

  const windowWidth = 500;
  const windowHeight = 600;

  const mainWindow = new BrowserWindow({
    height: windowHeight,
    width: windowWidth,
    resizable: false,
    frame: false,
    skipTaskbar: true,
    alwaysOnTop: true,
    x: width - windowWidth,
    y: height - windowHeight,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged,
    },
  });

  screen.on("display-metrics-changed", (event, display, changedMetrics) => {
    const { x, y, width, height } = display.workArea;
    mainWindow.setBounds({
      x: width - windowWidth,
      y: height - windowHeight,
      width: windowWidth,
      height: windowHeight,
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Content Security Policy
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    const csp =
      "default-src 'self' 'unsafe-inline' 'unsafe-eval' data:; img-src *";

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [csp],
      },
    });
  });

  const tray = new Tray(path.join(assetsPath, "icon.png"));
  const contextMenu = Menu.buildFromTemplate([
    { label: "Show App", click: () => mainWindow.show() },
    {
      label: "Restart",
      click: () => {
        app.relaunch();
        app.exit();
      },
    },
    { label: "Quit", click: () => app.quit() },
  ]);

  tray.setToolTip("Gifly");
  tray.setContextMenu(contextMenu);

  // race condition fix (scuffed)

  let ignoreBlur = false;
  let ignoreShow = false;

  tray.on("click", () => {
    if (mainWindow.isVisible()) {
      mainWindow.hide();
    } else {
      if (!ignoreShow) {
        ignoreBlur = true;
        mainWindow.show();

        setTimeout(() => {
          ignoreBlur = false;
        }, 500);
      }
    }
  });

  mainWindow.on("blur", () => {
    if (!ignoreBlur) {
      ignoreShow = true;
      mainWindow.hide();

      setTimeout(() => {
        ignoreShow = false;
      }, 500);
    }
  });

  mainWindow.minimize();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
